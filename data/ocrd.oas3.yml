components:
  schemas:
    image-file: {description: Image created by processor., format: binary, type: string}
    job-id:
      description: Status and job ID of created job.
      properties:
        jobId: {description: ID of the created job., type: string}
        status: {$ref: '#/components/schemas/status'}
      type: object
    job-status:
      description: "Description of the status:\n  * `RUNNING` - Job is not finished\
        \ yet.\n  * `FINISHED` - Job was executed successfully.\n  * `ERROR` - Job\
        \ was cancelled due to an error.\n  * `STOPPED` - Job was stopped due to server\
        \ restrictions.\n"
      enum: [RUNNING, FINISHED, ERROR, STOPPED]
      type: string
    log-level:
      default: INFO
      description: Minimum Log level. One of (OFF, ERROR, WARN, INFO (default), DEBUG,
        TRACE). Actual mechanism for filtering log messages must not be implemented
        by processors.
      enum: [false, ERROR, WARN, INFO, DEBUG, TRACE]
      example: DEBUG
      type: string
    logging:
      additionalProperties: false
      description: JSON file holding the output of the job.
      properties:
        stderr:
          description: Output of error console.
          items: {$ref: '#/components/schemas/message-with-timestamp'}
          type: array
        stdout:
          description: Output of console.
          items: {$ref: '#/components/schemas/message-with-timestamp'}
          type: array
      type: object
    message-with-timestamp:
      properties:
        message: {description: message, type: string}
        timestamp: {description: timestamp, format: date, type: string}
      type: object
    mets-file: {description: 'XML holding all information of the digitized document.
        All references of the images and the PAGE XMLs are available via fileGrp section  (see
        http://www.loc.gov/standards/mets/mets.xsd)', type: string}
    page-file: {description: 'XML holding all information of the digitized page. (see
        http://schema.primaresearch.org/PAGE/gts/pagecontent/2017-07-15/pagecontent.xsd)',
      type: string}
    processors:
      description: Object holding all parameters needed by most processors.
      properties:
        group-id:
          description: All IDs of the image files which should be characterized.
          items: {type: string}
          type: array
        input-file-grp:
          description: ID(s) of the fileGrps which have to be used as input. (fileGrp@USE).
          items: {type: string}
          type: array
        log-level: {$ref: '#/components/schemas/log-level'}
        mets: {$ref: '#/components/schemas/mets-file'}
        output-file-grp:
          description: ID(s) of the fileGrps which have to be used as output. (fileGrp@USE).
          items: {type: string}
          type: array
        parameter:
          description: Parameter file in JSON format.
          items: {type: string}
          type: array
      required: [mets, input-file-grp, output-file-grp]
      type: object
    provenance-file: {description: JSON file holding all information about the provenance.,
      type: string}
    status:
      enum: [OK]
      type: string
    zip-file: {description: "zip-file containing all files created by the processor.\
        \  Content of zip-file: \n  * METS file (mandatory) (default: mets.xml)\n\
        \  * Provenance (mandatory) (default: provenance.json)\n  * PAGE XML (optional)\
        \ \n  * Images (optional) \n  * Output of (error) console. (optional) (default:\
        \ output.json)\n\nAll files have to be referenced inside the METS file.\n",
      format: binary, type: string}
info:
  contact: {email: volker.hartmann@kit.edu}
  description: 'This is a generic definition of the modules used for the OCR-D project.

    * Implementation path for the different processors (description)

    * /preprocessing/characterization (Determine specific characteristics of a digitalization.)

    * /preprocessing/optimization (Execute all steps for image optimization at once.)

    * /preprocessing/optimization/cropping (Crops the digitization to printspace.)

    * /preprocessing/optimization/deskewing (Deskews the digitization.)

    * /preprocessing/optimization/despeckling (Despeckles the digitization.)

    * /preprocessing/optimization/dewarping (Dewarps the digitization.)

    * /preprocessing/optimization/binarization (Binarize the digitization.)

    *  /recognition/text-recognition (Estimate font families and languages used.)

    *  /recognition/font-identification (Estimate font families and languages used.)

    * /layout/segmentation (Detect and classify all regions of a page.)

    * /layout/segmentation/page (Detect all regions of a page.)

    * /layout/segmentation/line (Detect all text line regions inside the text regions
    of a page.)

    * /layout/segmentation/classification | Fine-grained classification of all detected
    regions of a page.)

    * /layout/analysis (Analyse regions on document level.)'
  license: {name: Apache 2.0, url: 'http://www.apache.org/licenses/LICENSE-2.0.html'}
  termsOfService: http://swagger.io/terms/
  title: OCR-D
  version: v1.2.0
openapi: 3.0.0
paths:
  /kraken-binarize:
    get:
      description: Get ocrd-tool.json
      produces: []
      responses:
        '200':
          application/json:
            description: Got ocrd-tool.json
            schema:
              additionalProperties: false
              description: Schema for tools by OCR-D MP
              properties:
                dockerhub: {description: DockerHub image, type: string}
                git_url: {description: Github/Gitlab URL, format: url, type: string}
                tools:
                  additionalProperties: false
                  patternProperties:
                    ocrd-.*:
                      additionalProperties: false
                      properties:
                        categories:
                          description: Tools belong to this categories, representing
                            modules within the OCR-D project structure
                          items:
                            enum: [Image preprocessing, Layout analysis, Text recognition
                                and optimization, Model training, Long-term preservation,
                              Quality assurance]
                            type: string
                          type: array
                        description: {description: Concise description what the tool
                            does}
                        executable: {description: The name of the CLI executable in
                            $PATH, type: string}
                        parameters: {description: 'Object describing the parameters
                            of a tool. Keys are parameter names, values sub-schemas.',
                          type: object}
                        steps:
                          description: This tool can be used at these steps in the
                            OCR-D functional model
                          items:
                            enum: [preprocessing/characterization, preprocessing/optimization,
                              preprocessing/optimization/cropping, preprocessing/optimization/deskewing,
                              preprocessing/optimization/despeckling, preprocessing/optimization/dewarping,
                              preprocessing/optimization/binarization, preprocessing/optimization/grayscale_normalization,
                              recognition/text-recognition, recognition/font-identification,
                              layout/segmentation, layout/segmentation/region, layout/segmentation/line,
                              layout/segmentation/word, layout/segmentation/classification,
                              layout/analysis]
                            type: string
                          type: array
                      required: [description, steps, executable, categories]
                      type: object
                  type: object
              required: [git_url, tools]
              type: object
      tags: &id001 [Image Preprocessing]
    post:
      description: Binarize images with kraken
      operationId: start-processor
      requestBody:
        content:
          multipart/form-data:
            schema:
              description: Object holding all parameters needed by most processors.
              parameters:
                properties: {}
                type: object
              properties:
                group-id:
                  description: All IDs of the image files which should be characterized.
                  items: {type: string}
                  type: array
                input-file-grp:
                  description: ID(s) of the fileGrps which have to be used as input.
                    (fileGrp@USE).
                  items: {type: string}
                  type: array
                log-level: {$ref: '#/components/schemas/log-level'}
                mets: {$ref: '#/components/schemas/mets-file'}
                output-file-grp:
                  description: ID(s) of the fileGrps which have to be used as output.
                    (fileGrp@USE).
                  items: {type: string}
                  type: array
                parameter:
                  description: Parameter file in JSON format.
                  items: {type: string}
                  type: array
              required: [mets, input-file-grp, output-file-grp]
              type: object
      responses:
        '201':
          content:
            application/json:
              schema: {$ref: '#/components/schemas/job-id'}
          description: Successful Operation. The created file(s) has/have to be referenced
            inside the given fileGrp sections.
          headers:
            Location:
              description: URL of the generated job.
              schema: {format: url, type: string}
          links:
            GetFilesByJobId:
              description: 'The `jobId` value returned in the response can be used
                as the `jobID` parameter in `GET /ocrd/processor/jobid/{jobID}`.

                '
              operationId: get-created-files-of-processor
              parameters: {jobID: $response.body#/jobID}
        '400': {description: Invalid input}
        '500': {description: Internal error}
      summary: Binarize images with kraken
      tags: *id001
  /kraken-binarize/{_id}:
    delete:
      parameters:
      - description: job ID of the started process.
        in: path
        name: jobID
        required: true
        schema: {type: string}
      responses:
        '204':
          content:
            application/vnd.ocrd+job-status:
              schema: {$ref: '#/components/schemas/job-status'}
          description: Successful Operation. All linked resources are removed successfully.
        '404': {description: Not found.}
        '410': {description: Resource is not available anymore.}
        '500': {description: Internal error}
      summary: Delete all files created by job with ID 'jobID'.
      tags: *id001
    get:
      description: Fetch all file created by job with id 'jobID'. If more than one
        file is created per mimetype use mimetype 'application/zip' as accept header
        to fetch all files at once.
      operationId: get-created-files-of-processor
      parameters:
      - description: job ID of the started process.
        in: path
        name: jobID
        required: true
        schema: {type: string}
      responses:
        '200':
          content:
            application/mets+xml:
              schema: {$ref: '#/components/schemas/mets-file'}
            application/vnd.ocrd+job-status:
              schema: {$ref: '#/components/schemas/job-status'}
            application/vnd.ocrd.log+json:
              schema: {$ref: '#/components/schemas/logging'}
            application/vnd.ocrd.page+xml:
              schema: {$ref: '#/components/schemas/page-file'}
            application/vnd.ocrd.prov+json:
              schema: {$ref: '#/components/schemas/provenance-file'}
            application/zip:
              schema: {$ref: '#/components/schemas/zip-file'}
            image/*:
              schema: {$ref: '#/components/schemas/image-file'}
          description: Successful Operation.
        '400': {description: Bad request. Maybe more than one file of at least one
            mimetype was created. Please use mimetype 'application/zip' as accept
            header to fetch all files at once.}
        '500': {description: Internal error}
      summary: Get created files.
      tags: *id001
  /kraken-segment:
    get:
      description: Get ocrd-tool.json
      produces: []
      responses:
        '200':
          application/json:
            description: Got ocrd-tool.json
            schema:
              additionalProperties: false
              description: Schema for tools by OCR-D MP
              properties:
                dockerhub: {description: DockerHub image, type: string}
                git_url: {description: Github/Gitlab URL, format: url, type: string}
                tools:
                  additionalProperties: false
                  patternProperties:
                    ocrd-.*:
                      additionalProperties: false
                      properties:
                        categories:
                          description: Tools belong to this categories, representing
                            modules within the OCR-D project structure
                          items:
                            enum: [Image preprocessing, Layout analysis, Text recognition
                                and optimization, Model training, Long-term preservation,
                              Quality assurance]
                            type: string
                          type: array
                        description: {description: Concise description what the tool
                            does}
                        executable: {description: The name of the CLI executable in
                            $PATH, type: string}
                        parameters: {description: 'Object describing the parameters
                            of a tool. Keys are parameter names, values sub-schemas.',
                          type: object}
                        steps:
                          description: This tool can be used at these steps in the
                            OCR-D functional model
                          items:
                            enum: [preprocessing/characterization, preprocessing/optimization,
                              preprocessing/optimization/cropping, preprocessing/optimization/deskewing,
                              preprocessing/optimization/despeckling, preprocessing/optimization/dewarping,
                              preprocessing/optimization/binarization, preprocessing/optimization/grayscale_normalization,
                              recognition/text-recognition, recognition/font-identification,
                              layout/segmentation, layout/segmentation/region, layout/segmentation/line,
                              layout/segmentation/word, layout/segmentation/classification,
                              layout/analysis]
                            type: string
                          type: array
                      required: [description, steps, executable, categories]
                      type: object
                  type: object
              required: [git_url, tools]
              type: object
      tags: &id002 [Layout analysis]
    post:
      description: Block segmentation with kraken
      operationId: start-processor
      requestBody:
        content:
          multipart/form-data:
            schema:
              description: Object holding all parameters needed by most processors.
              parameters:
                properties: {}
                type: object
              properties:
                group-id:
                  description: All IDs of the image files which should be characterized.
                  items: {type: string}
                  type: array
                input-file-grp:
                  description: ID(s) of the fileGrps which have to be used as input.
                    (fileGrp@USE).
                  items: {type: string}
                  type: array
                log-level: {$ref: '#/components/schemas/log-level'}
                mets: {$ref: '#/components/schemas/mets-file'}
                output-file-grp:
                  description: ID(s) of the fileGrps which have to be used as output.
                    (fileGrp@USE).
                  items: {type: string}
                  type: array
                parameter:
                  description: Parameter file in JSON format.
                  items: {type: string}
                  type: array
              required: [mets, input-file-grp, output-file-grp]
              type: object
      responses:
        '201':
          content:
            application/json:
              schema: {$ref: '#/components/schemas/job-id'}
          description: Successful Operation. The created file(s) has/have to be referenced
            inside the given fileGrp sections.
          headers:
            Location:
              description: URL of the generated job.
              schema: {format: url, type: string}
          links:
            GetFilesByJobId:
              description: 'The `jobId` value returned in the response can be used
                as the `jobID` parameter in `GET /ocrd/processor/jobid/{jobID}`.

                '
              operationId: get-created-files-of-processor
              parameters: {jobID: $response.body#/jobID}
        '400': {description: Invalid input}
        '500': {description: Internal error}
      summary: Block segmentation with kraken
      tags: *id002
  /kraken-segment/{_id}:
    delete:
      parameters:
      - description: job ID of the started process.
        in: path
        name: jobID
        required: true
        schema: {type: string}
      responses:
        '204':
          content:
            application/vnd.ocrd+job-status:
              schema: {$ref: '#/components/schemas/job-status'}
          description: Successful Operation. All linked resources are removed successfully.
        '404': {description: Not found.}
        '410': {description: Resource is not available anymore.}
        '500': {description: Internal error}
      summary: Delete all files created by job with ID 'jobID'.
      tags: *id002
    get:
      description: Fetch all file created by job with id 'jobID'. If more than one
        file is created per mimetype use mimetype 'application/zip' as accept header
        to fetch all files at once.
      operationId: get-created-files-of-processor
      parameters:
      - description: job ID of the started process.
        in: path
        name: jobID
        required: true
        schema: {type: string}
      responses:
        '200':
          content:
            application/mets+xml:
              schema: {$ref: '#/components/schemas/mets-file'}
            application/vnd.ocrd+job-status:
              schema: {$ref: '#/components/schemas/job-status'}
            application/vnd.ocrd.log+json:
              schema: {$ref: '#/components/schemas/logging'}
            application/vnd.ocrd.page+xml:
              schema: {$ref: '#/components/schemas/page-file'}
            application/vnd.ocrd.prov+json:
              schema: {$ref: '#/components/schemas/provenance-file'}
            application/zip:
              schema: {$ref: '#/components/schemas/zip-file'}
            image/*:
              schema: {$ref: '#/components/schemas/image-file'}
          description: Successful Operation.
        '400': {description: Bad request. Maybe more than one file of at least one
            mimetype was created. Please use mimetype 'application/zip' as accept
            header to fetch all files at once.}
        '500': {description: Internal error}
      summary: Get created files.
      tags: *id002
  /tesserocr-recognize:
    get:
      description: Get ocrd-tool.json
      produces: []
      responses:
        '200':
          application/json:
            description: Got ocrd-tool.json
            schema:
              additionalProperties: false
              description: Schema for tools by OCR-D MP
              properties:
                dockerhub: {description: DockerHub image, type: string}
                git_url: {description: Github/Gitlab URL, format: url, type: string}
                tools:
                  additionalProperties: false
                  patternProperties:
                    ocrd-.*:
                      additionalProperties: false
                      properties:
                        categories:
                          description: Tools belong to this categories, representing
                            modules within the OCR-D project structure
                          items:
                            enum: [Image preprocessing, Layout analysis, Text recognition
                                and optimization, Model training, Long-term preservation,
                              Quality assurance]
                            type: string
                          type: array
                        description: {description: Concise description what the tool
                            does}
                        executable: {description: The name of the CLI executable in
                            $PATH, type: string}
                        parameters: {description: 'Object describing the parameters
                            of a tool. Keys are parameter names, values sub-schemas.',
                          type: object}
                        steps:
                          description: This tool can be used at these steps in the
                            OCR-D functional model
                          items:
                            enum: [preprocessing/characterization, preprocessing/optimization,
                              preprocessing/optimization/cropping, preprocessing/optimization/deskewing,
                              preprocessing/optimization/despeckling, preprocessing/optimization/dewarping,
                              preprocessing/optimization/binarization, preprocessing/optimization/grayscale_normalization,
                              recognition/text-recognition, recognition/font-identification,
                              layout/segmentation, layout/segmentation/region, layout/segmentation/line,
                              layout/segmentation/word, layout/segmentation/classification,
                              layout/analysis]
                            type: string
                          type: array
                      required: [description, steps, executable, categories]
                      type: object
                  type: object
              required: [git_url, tools]
              type: object
      tags: &id003 [Text recognition and optimization]
    post:
      description: Recognize text in lines with tesseract
      operationId: start-processor
      requestBody:
        content:
          multipart/form-data:
            schema:
              description: Object holding all parameters needed by most processors.
              parameters:
                properties: {}
                type: object
              properties:
                group-id:
                  description: All IDs of the image files which should be characterized.
                  items: {type: string}
                  type: array
                input-file-grp:
                  description: ID(s) of the fileGrps which have to be used as input.
                    (fileGrp@USE).
                  items: {type: string}
                  type: array
                log-level: {$ref: '#/components/schemas/log-level'}
                mets: {$ref: '#/components/schemas/mets-file'}
                output-file-grp:
                  description: ID(s) of the fileGrps which have to be used as output.
                    (fileGrp@USE).
                  items: {type: string}
                  type: array
                parameter:
                  description: Parameter file in JSON format.
                  items: {type: string}
                  type: array
              required: [mets, input-file-grp, output-file-grp]
              type: object
      responses:
        '201':
          content:
            application/json:
              schema: {$ref: '#/components/schemas/job-id'}
          description: Successful Operation. The created file(s) has/have to be referenced
            inside the given fileGrp sections.
          headers:
            Location:
              description: URL of the generated job.
              schema: {format: url, type: string}
          links:
            GetFilesByJobId:
              description: 'The `jobId` value returned in the response can be used
                as the `jobID` parameter in `GET /ocrd/processor/jobid/{jobID}`.

                '
              operationId: get-created-files-of-processor
              parameters: {jobID: $response.body#/jobID}
        '400': {description: Invalid input}
        '500': {description: Internal error}
      summary: Recognize text in lines with tesseract
      tags: *id003
  /tesserocr-recognize/{_id}:
    delete:
      parameters:
      - description: job ID of the started process.
        in: path
        name: jobID
        required: true
        schema: {type: string}
      responses:
        '204':
          content:
            application/vnd.ocrd+job-status:
              schema: {$ref: '#/components/schemas/job-status'}
          description: Successful Operation. All linked resources are removed successfully.
        '404': {description: Not found.}
        '410': {description: Resource is not available anymore.}
        '500': {description: Internal error}
      summary: Delete all files created by job with ID 'jobID'.
      tags: *id003
    get:
      description: Fetch all file created by job with id 'jobID'. If more than one
        file is created per mimetype use mimetype 'application/zip' as accept header
        to fetch all files at once.
      operationId: get-created-files-of-processor
      parameters:
      - description: job ID of the started process.
        in: path
        name: jobID
        required: true
        schema: {type: string}
      responses:
        '200':
          content:
            application/mets+xml:
              schema: {$ref: '#/components/schemas/mets-file'}
            application/vnd.ocrd+job-status:
              schema: {$ref: '#/components/schemas/job-status'}
            application/vnd.ocrd.log+json:
              schema: {$ref: '#/components/schemas/logging'}
            application/vnd.ocrd.page+xml:
              schema: {$ref: '#/components/schemas/page-file'}
            application/vnd.ocrd.prov+json:
              schema: {$ref: '#/components/schemas/provenance-file'}
            application/zip:
              schema: {$ref: '#/components/schemas/zip-file'}
            image/*:
              schema: {$ref: '#/components/schemas/image-file'}
          description: Successful Operation.
        '400': {description: Bad request. Maybe more than one file of at least one
            mimetype was created. Please use mimetype 'application/zip' as accept
            header to fetch all files at once.}
        '500': {description: Internal error}
      summary: Get created files.
      tags: *id003
  /tesserocr-segment-line:
    get:
      description: Get ocrd-tool.json
      produces: []
      responses:
        '200':
          application/json:
            description: Got ocrd-tool.json
            schema:
              additionalProperties: false
              description: Schema for tools by OCR-D MP
              properties:
                dockerhub: {description: DockerHub image, type: string}
                git_url: {description: Github/Gitlab URL, format: url, type: string}
                tools:
                  additionalProperties: false
                  patternProperties:
                    ocrd-.*:
                      additionalProperties: false
                      properties:
                        categories:
                          description: Tools belong to this categories, representing
                            modules within the OCR-D project structure
                          items:
                            enum: [Image preprocessing, Layout analysis, Text recognition
                                and optimization, Model training, Long-term preservation,
                              Quality assurance]
                            type: string
                          type: array
                        description: {description: Concise description what the tool
                            does}
                        executable: {description: The name of the CLI executable in
                            $PATH, type: string}
                        parameters: {description: 'Object describing the parameters
                            of a tool. Keys are parameter names, values sub-schemas.',
                          type: object}
                        steps:
                          description: This tool can be used at these steps in the
                            OCR-D functional model
                          items:
                            enum: [preprocessing/characterization, preprocessing/optimization,
                              preprocessing/optimization/cropping, preprocessing/optimization/deskewing,
                              preprocessing/optimization/despeckling, preprocessing/optimization/dewarping,
                              preprocessing/optimization/binarization, preprocessing/optimization/grayscale_normalization,
                              recognition/text-recognition, recognition/font-identification,
                              layout/segmentation, layout/segmentation/region, layout/segmentation/line,
                              layout/segmentation/word, layout/segmentation/classification,
                              layout/analysis]
                            type: string
                          type: array
                      required: [description, steps, executable, categories]
                      type: object
                  type: object
              required: [git_url, tools]
              type: object
      tags: &id004 [Layout analysis]
    post:
      description: Segment page into regions with tesseract
      operationId: start-processor
      requestBody:
        content:
          multipart/form-data:
            schema:
              description: Object holding all parameters needed by most processors.
              parameters:
                properties: {}
                type: object
              properties:
                group-id:
                  description: All IDs of the image files which should be characterized.
                  items: {type: string}
                  type: array
                input-file-grp:
                  description: ID(s) of the fileGrps which have to be used as input.
                    (fileGrp@USE).
                  items: {type: string}
                  type: array
                log-level: {$ref: '#/components/schemas/log-level'}
                mets: {$ref: '#/components/schemas/mets-file'}
                output-file-grp:
                  description: ID(s) of the fileGrps which have to be used as output.
                    (fileGrp@USE).
                  items: {type: string}
                  type: array
                parameter:
                  description: Parameter file in JSON format.
                  items: {type: string}
                  type: array
              required: [mets, input-file-grp, output-file-grp]
              type: object
      responses:
        '201':
          content:
            application/json:
              schema: {$ref: '#/components/schemas/job-id'}
          description: Successful Operation. The created file(s) has/have to be referenced
            inside the given fileGrp sections.
          headers:
            Location:
              description: URL of the generated job.
              schema: {format: url, type: string}
          links:
            GetFilesByJobId:
              description: 'The `jobId` value returned in the response can be used
                as the `jobID` parameter in `GET /ocrd/processor/jobid/{jobID}`.

                '
              operationId: get-created-files-of-processor
              parameters: {jobID: $response.body#/jobID}
        '400': {description: Invalid input}
        '500': {description: Internal error}
      summary: Segment page into regions with tesseract
      tags: *id004
  /tesserocr-segment-line/{_id}:
    delete:
      parameters:
      - description: job ID of the started process.
        in: path
        name: jobID
        required: true
        schema: {type: string}
      responses:
        '204':
          content:
            application/vnd.ocrd+job-status:
              schema: {$ref: '#/components/schemas/job-status'}
          description: Successful Operation. All linked resources are removed successfully.
        '404': {description: Not found.}
        '410': {description: Resource is not available anymore.}
        '500': {description: Internal error}
      summary: Delete all files created by job with ID 'jobID'.
      tags: *id004
    get:
      description: Fetch all file created by job with id 'jobID'. If more than one
        file is created per mimetype use mimetype 'application/zip' as accept header
        to fetch all files at once.
      operationId: get-created-files-of-processor
      parameters:
      - description: job ID of the started process.
        in: path
        name: jobID
        required: true
        schema: {type: string}
      responses:
        '200':
          content:
            application/mets+xml:
              schema: {$ref: '#/components/schemas/mets-file'}
            application/vnd.ocrd+job-status:
              schema: {$ref: '#/components/schemas/job-status'}
            application/vnd.ocrd.log+json:
              schema: {$ref: '#/components/schemas/logging'}
            application/vnd.ocrd.page+xml:
              schema: {$ref: '#/components/schemas/page-file'}
            application/vnd.ocrd.prov+json:
              schema: {$ref: '#/components/schemas/provenance-file'}
            application/zip:
              schema: {$ref: '#/components/schemas/zip-file'}
            image/*:
              schema: {$ref: '#/components/schemas/image-file'}
          description: Successful Operation.
        '400': {description: Bad request. Maybe more than one file of at least one
            mimetype was created. Please use mimetype 'application/zip' as accept
            header to fetch all files at once.}
        '500': {description: Internal error}
      summary: Get created files.
      tags: *id004
  /tesserocr-segment-region:
    get:
      description: Get ocrd-tool.json
      produces: []
      responses:
        '200':
          application/json:
            description: Got ocrd-tool.json
            schema:
              additionalProperties: false
              description: Schema for tools by OCR-D MP
              properties:
                dockerhub: {description: DockerHub image, type: string}
                git_url: {description: Github/Gitlab URL, format: url, type: string}
                tools:
                  additionalProperties: false
                  patternProperties:
                    ocrd-.*:
                      additionalProperties: false
                      properties:
                        categories:
                          description: Tools belong to this categories, representing
                            modules within the OCR-D project structure
                          items:
                            enum: [Image preprocessing, Layout analysis, Text recognition
                                and optimization, Model training, Long-term preservation,
                              Quality assurance]
                            type: string
                          type: array
                        description: {description: Concise description what the tool
                            does}
                        executable: {description: The name of the CLI executable in
                            $PATH, type: string}
                        parameters: {description: 'Object describing the parameters
                            of a tool. Keys are parameter names, values sub-schemas.',
                          type: object}
                        steps:
                          description: This tool can be used at these steps in the
                            OCR-D functional model
                          items:
                            enum: [preprocessing/characterization, preprocessing/optimization,
                              preprocessing/optimization/cropping, preprocessing/optimization/deskewing,
                              preprocessing/optimization/despeckling, preprocessing/optimization/dewarping,
                              preprocessing/optimization/binarization, preprocessing/optimization/grayscale_normalization,
                              recognition/text-recognition, recognition/font-identification,
                              layout/segmentation, layout/segmentation/region, layout/segmentation/line,
                              layout/segmentation/word, layout/segmentation/classification,
                              layout/analysis]
                            type: string
                          type: array
                      required: [description, steps, executable, categories]
                      type: object
                  type: object
              required: [git_url, tools]
              type: object
      tags: &id005 [Layout analysis]
    post:
      description: Segment regions into lines with tesseract
      operationId: start-processor
      requestBody:
        content:
          multipart/form-data:
            schema:
              description: Object holding all parameters needed by most processors.
              parameters:
                properties: {}
                type: object
              properties:
                group-id:
                  description: All IDs of the image files which should be characterized.
                  items: {type: string}
                  type: array
                input-file-grp:
                  description: ID(s) of the fileGrps which have to be used as input.
                    (fileGrp@USE).
                  items: {type: string}
                  type: array
                log-level: {$ref: '#/components/schemas/log-level'}
                mets: {$ref: '#/components/schemas/mets-file'}
                output-file-grp:
                  description: ID(s) of the fileGrps which have to be used as output.
                    (fileGrp@USE).
                  items: {type: string}
                  type: array
                parameter:
                  description: Parameter file in JSON format.
                  items: {type: string}
                  type: array
              required: [mets, input-file-grp, output-file-grp]
              type: object
      responses:
        '201':
          content:
            application/json:
              schema: {$ref: '#/components/schemas/job-id'}
          description: Successful Operation. The created file(s) has/have to be referenced
            inside the given fileGrp sections.
          headers:
            Location:
              description: URL of the generated job.
              schema: {format: url, type: string}
          links:
            GetFilesByJobId:
              description: 'The `jobId` value returned in the response can be used
                as the `jobID` parameter in `GET /ocrd/processor/jobid/{jobID}`.

                '
              operationId: get-created-files-of-processor
              parameters: {jobID: $response.body#/jobID}
        '400': {description: Invalid input}
        '500': {description: Internal error}
      summary: Segment regions into lines with tesseract
      tags: *id005
  /tesserocr-segment-region/{_id}:
    delete:
      parameters:
      - description: job ID of the started process.
        in: path
        name: jobID
        required: true
        schema: {type: string}
      responses:
        '204':
          content:
            application/vnd.ocrd+job-status:
              schema: {$ref: '#/components/schemas/job-status'}
          description: Successful Operation. All linked resources are removed successfully.
        '404': {description: Not found.}
        '410': {description: Resource is not available anymore.}
        '500': {description: Internal error}
      summary: Delete all files created by job with ID 'jobID'.
      tags: *id005
    get:
      description: Fetch all file created by job with id 'jobID'. If more than one
        file is created per mimetype use mimetype 'application/zip' as accept header
        to fetch all files at once.
      operationId: get-created-files-of-processor
      parameters:
      - description: job ID of the started process.
        in: path
        name: jobID
        required: true
        schema: {type: string}
      responses:
        '200':
          content:
            application/mets+xml:
              schema: {$ref: '#/components/schemas/mets-file'}
            application/vnd.ocrd+job-status:
              schema: {$ref: '#/components/schemas/job-status'}
            application/vnd.ocrd.log+json:
              schema: {$ref: '#/components/schemas/logging'}
            application/vnd.ocrd.page+xml:
              schema: {$ref: '#/components/schemas/page-file'}
            application/vnd.ocrd.prov+json:
              schema: {$ref: '#/components/schemas/provenance-file'}
            application/zip:
              schema: {$ref: '#/components/schemas/zip-file'}
            image/*:
              schema: {$ref: '#/components/schemas/image-file'}
          description: Successful Operation.
        '400': {description: Bad request. Maybe more than one file of at least one
            mimetype was created. Please use mimetype 'application/zip' as accept
            header to fetch all files at once.}
        '500': {description: Internal error}
      summary: Get created files.
      tags: *id005
  /tesserocr-segment-word:
    get:
      description: Get ocrd-tool.json
      produces: []
      responses:
        '200':
          application/json:
            description: Got ocrd-tool.json
            schema:
              additionalProperties: false
              description: Schema for tools by OCR-D MP
              properties:
                dockerhub: {description: DockerHub image, type: string}
                git_url: {description: Github/Gitlab URL, format: url, type: string}
                tools:
                  additionalProperties: false
                  patternProperties:
                    ocrd-.*:
                      additionalProperties: false
                      properties:
                        categories:
                          description: Tools belong to this categories, representing
                            modules within the OCR-D project structure
                          items:
                            enum: [Image preprocessing, Layout analysis, Text recognition
                                and optimization, Model training, Long-term preservation,
                              Quality assurance]
                            type: string
                          type: array
                        description: {description: Concise description what the tool
                            does}
                        executable: {description: The name of the CLI executable in
                            $PATH, type: string}
                        parameters: {description: 'Object describing the parameters
                            of a tool. Keys are parameter names, values sub-schemas.',
                          type: object}
                        steps:
                          description: This tool can be used at these steps in the
                            OCR-D functional model
                          items:
                            enum: [preprocessing/characterization, preprocessing/optimization,
                              preprocessing/optimization/cropping, preprocessing/optimization/deskewing,
                              preprocessing/optimization/despeckling, preprocessing/optimization/dewarping,
                              preprocessing/optimization/binarization, preprocessing/optimization/grayscale_normalization,
                              recognition/text-recognition, recognition/font-identification,
                              layout/segmentation, layout/segmentation/region, layout/segmentation/line,
                              layout/segmentation/word, layout/segmentation/classification,
                              layout/analysis]
                            type: string
                          type: array
                      required: [description, steps, executable, categories]
                      type: object
                  type: object
              required: [git_url, tools]
              type: object
      tags: &id006 [Layout analysis]
    post:
      description: Segment lines into words with tesseract
      operationId: start-processor
      requestBody:
        content:
          multipart/form-data:
            schema:
              description: Object holding all parameters needed by most processors.
              parameters:
                properties: {}
                type: object
              properties:
                group-id:
                  description: All IDs of the image files which should be characterized.
                  items: {type: string}
                  type: array
                input-file-grp:
                  description: ID(s) of the fileGrps which have to be used as input.
                    (fileGrp@USE).
                  items: {type: string}
                  type: array
                log-level: {$ref: '#/components/schemas/log-level'}
                mets: {$ref: '#/components/schemas/mets-file'}
                output-file-grp:
                  description: ID(s) of the fileGrps which have to be used as output.
                    (fileGrp@USE).
                  items: {type: string}
                  type: array
                parameter:
                  description: Parameter file in JSON format.
                  items: {type: string}
                  type: array
              required: [mets, input-file-grp, output-file-grp]
              type: object
      responses:
        '201':
          content:
            application/json:
              schema: {$ref: '#/components/schemas/job-id'}
          description: Successful Operation. The created file(s) has/have to be referenced
            inside the given fileGrp sections.
          headers:
            Location:
              description: URL of the generated job.
              schema: {format: url, type: string}
          links:
            GetFilesByJobId:
              description: 'The `jobId` value returned in the response can be used
                as the `jobID` parameter in `GET /ocrd/processor/jobid/{jobID}`.

                '
              operationId: get-created-files-of-processor
              parameters: {jobID: $response.body#/jobID}
        '400': {description: Invalid input}
        '500': {description: Internal error}
      summary: Segment lines into words with tesseract
      tags: *id006
  /tesserocr-segment-word/{_id}:
    delete:
      parameters:
      - description: job ID of the started process.
        in: path
        name: jobID
        required: true
        schema: {type: string}
      responses:
        '204':
          content:
            application/vnd.ocrd+job-status:
              schema: {$ref: '#/components/schemas/job-status'}
          description: Successful Operation. All linked resources are removed successfully.
        '404': {description: Not found.}
        '410': {description: Resource is not available anymore.}
        '500': {description: Internal error}
      summary: Delete all files created by job with ID 'jobID'.
      tags: *id006
    get:
      description: Fetch all file created by job with id 'jobID'. If more than one
        file is created per mimetype use mimetype 'application/zip' as accept header
        to fetch all files at once.
      operationId: get-created-files-of-processor
      parameters:
      - description: job ID of the started process.
        in: path
        name: jobID
        required: true
        schema: {type: string}
      responses:
        '200':
          content:
            application/mets+xml:
              schema: {$ref: '#/components/schemas/mets-file'}
            application/vnd.ocrd+job-status:
              schema: {$ref: '#/components/schemas/job-status'}
            application/vnd.ocrd.log+json:
              schema: {$ref: '#/components/schemas/logging'}
            application/vnd.ocrd.page+xml:
              schema: {$ref: '#/components/schemas/page-file'}
            application/vnd.ocrd.prov+json:
              schema: {$ref: '#/components/schemas/provenance-file'}
            application/zip:
              schema: {$ref: '#/components/schemas/zip-file'}
            image/*:
              schema: {$ref: '#/components/schemas/image-file'}
          description: Successful Operation.
        '400': {description: Bad request. Maybe more than one file of at least one
            mimetype was created. Please use mimetype 'application/zip' as accept
            header to fetch all files at once.}
        '500': {description: Internal error}
      summary: Get created files.
      tags: *id006
servers:
- {url: 'http://test.ocr-d.de/v1'}
tags:
- {description: Methods that characterize and optimize the digital representations
    for layout and text recognition., name: Image preprocessing}
- {description: 'Registration of the correct text flow, that means the reproduction
    of the logical-structural text flow and high text accuracy.', name: Layout analysis}
- {description: Combination of several OCR engines with subsequent corrections to
    improve text results., name: Text recognition and optimization}
- {description: Training and provision of models., name: Model training}
- {description: Ensuring the long-term availability and referenceability of the texts
    obtained., name: Long-term preservation}
- {description: Determination/estimation of the potential of each component., name: Quality
    assurance}

