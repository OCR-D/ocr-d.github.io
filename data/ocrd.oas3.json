{
  "tags": [
    {
      "name": "Image preprocessing",
      "description": "Methods that characterize and optimize the digital representations for layout and text recognition."
    },
    {
      "name": "Layout analysis",
      "description": "Registration of the correct text flow, that means the reproduction of the logical-structural text flow and high text accuracy."
    },
    {
      "name": "Text recognition and optimization",
      "description": "Combination of several OCR engines with subsequent corrections to improve text results."
    },
    {
      "name": "Model training",
      "description": "Training and provision of models."
    },
    {
      "name": "Long-term preservation",
      "description": "Ensuring the long-term availability and referenceability of the texts obtained."
    },
    {
      "name": "Quality assurance",
      "description": "Determination/estimation of the potential of each component."
    }
  ],
  "components": {
    "schemas": {
      "image-file": {
        "type": "string",
        "format": "binary",
        "description": "Image created by processor."
      },
      "mets-file": {
        "type": "string",
        "description": "XML holding all information of the digitized document. All references of the images and the PAGE XMLs are available via fileGrp section  (see http://www.loc.gov/standards/mets/mets.xsd)"
      },
      "job-id": {
        "type": "object",
        "description": "Status and job ID of created job.",
        "properties": {
          "jobId": {
            "type": "string",
            "description": "ID of the created job."
          },
          "status": {
            "$ref": "#/components/schemas/status"
          }
        }
      },
      "provenance-file": {
        "type": "string",
        "description": "JSON file holding all information about the provenance."
      },
      "message-with-timestamp": {
        "type": "object",
        "properties": {
          "timestamp": {
            "type": "string",
            "format": "date",
            "description": "timestamp"
          },
          "message": {
            "type": "string",
            "description": "message"
          }
        }
      },
      "processors": {
        "type": "object",
        "description": "Object holding all parameters needed by most processors.",
        "required": [
          "mets",
          "input-file-grp",
          "output-file-grp"
        ],
        "properties": {
          "group-id": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "description": "All IDs of the image files which should be characterized."
          },
          "log-level": {
            "$ref": "#/components/schemas/log-level"
          },
          "parameter": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "description": "Parameter file in JSON format."
          },
          "output-file-grp": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "description": "ID(s) of the fileGrps which have to be used as output. (fileGrp@USE)."
          },
          "input-file-grp": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "description": "ID(s) of the fileGrps which have to be used as input. (fileGrp@USE)."
          },
          "mets": {
            "$ref": "#/components/schemas/mets-file"
          }
        }
      },
      "job-status": {
        "type": "string",
        "enum": [
          "RUNNING",
          "FINISHED",
          "ERROR",
          "STOPPED"
        ],
        "description": "Description of the status:\n  * `RUNNING` - Job is not finished yet.\n  * `FINISHED` - Job was executed successfully.\n  * `ERROR` - Job was cancelled due to an error.\n  * `STOPPED` - Job was stopped due to server restrictions.\n"
      },
      "zip-file": {
        "type": "string",
        "format": "binary",
        "description": "zip-file containing all files created by the processor.  Content of zip-file: \n  * METS file (mandatory) (default: mets.xml)\n  * Provenance (mandatory) (default: provenance.json)\n  * PAGE XML (optional) \n  * Images (optional) \n  * Output of (error) console. (optional) (default: output.json)\n\nAll files have to be referenced inside the METS file.\n"
      },
      "status": {
        "enum": [
          "OK"
        ],
        "type": "string"
      },
      "logging": {
        "additionalProperties": false,
        "type": "object",
        "description": "JSON file holding the output of the job.",
        "properties": {
          "stderr": {
            "items": {
              "$ref": "#/components/schemas/message-with-timestamp"
            },
            "type": "array",
            "description": "Output of error console."
          },
          "stdout": {
            "items": {
              "$ref": "#/components/schemas/message-with-timestamp"
            },
            "type": "array",
            "description": "Output of console."
          }
        }
      },
      "log-level": {
        "example": "DEBUG",
        "type": "string",
        "enum": [
          false,
          "ERROR",
          "WARN",
          "INFO",
          "DEBUG",
          "TRACE"
        ],
        "default": "INFO",
        "description": "Minimum Log level. One of (OFF, ERROR, WARN, INFO (default), DEBUG, TRACE). Actual mechanism for filtering log messages must not be implemented by processors."
      },
      "page-file": {
        "type": "string",
        "description": "XML holding all information of the digitized page. (see http://schema.primaresearch.org/PAGE/gts/pagecontent/2017-07-15/pagecontent.xsd)"
      }
    }
  },
  "openapi": "3.0.0",
  "paths": {
    "/tesserocr-segment-word/{_id}": {
      "delete": {
        "summary": "Delete all files created by job with ID 'jobID'.",
        "parameters": [
          {
            "in": "path",
            "schema": {
              "type": "string"
            },
            "name": "jobID",
            "required": true,
            "description": "job ID of the started process."
          }
        ],
        "tags": [
          "Layout analysis"
        ],
        "responses": {
          "500": {
            "description": "Internal error"
          },
          "204": {
            "content": {
              "application/vnd.ocrd+job-status": {
                "schema": {
                  "$ref": "#/components/schemas/job-status"
                }
              }
            },
            "description": "Successful Operation. All linked resources are removed successfully."
          },
          "410": {
            "description": "Resource is not available anymore."
          },
          "404": {
            "description": "Not found."
          }
        }
      },
      "get": {
        "operationId": "get-created-files-of-processor",
        "parameters": [
          {
            "in": "path",
            "schema": {
              "type": "string"
            },
            "name": "jobID",
            "required": true,
            "description": "job ID of the started process."
          }
        ],
        "tags": [
          "Layout analysis"
        ],
        "description": "Fetch all file created by job with id 'jobID'. If more than one file is created per mimetype use mimetype 'application/zip' as accept header to fetch all files at once.",
        "summary": "Get created files.",
        "responses": {
          "500": {
            "description": "Internal error"
          },
          "200": {
            "content": {
              "application/vnd.ocrd+job-status": {
                "schema": {
                  "$ref": "#/components/schemas/job-status"
                }
              },
              "application/vnd.ocrd.log+json": {
                "schema": {
                  "$ref": "#/components/schemas/logging"
                }
              },
              "application/zip": {
                "schema": {
                  "$ref": "#/components/schemas/zip-file"
                }
              },
              "application/mets+xml": {
                "schema": {
                  "$ref": "#/components/schemas/mets-file"
                }
              },
              "image/*": {
                "schema": {
                  "$ref": "#/components/schemas/image-file"
                }
              },
              "application/vnd.ocrd.prov+json": {
                "schema": {
                  "$ref": "#/components/schemas/provenance-file"
                }
              },
              "application/vnd.ocrd.page+xml": {
                "schema": {
                  "$ref": "#/components/schemas/page-file"
                }
              }
            },
            "description": "Successful Operation."
          },
          "400": {
            "description": "Bad request. Maybe more than one file of at least one mimetype was created. Please use mimetype 'application/zip' as accept header to fetch all files at once."
          }
        }
      }
    },
    "/kraken-ocr": {
      "post": {
        "operationId": "start-processor",
        "tags": [
          "Text recognition and optimization"
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "parameters": {
                  "properties": {},
                  "type": "object"
                },
                "properties": {
                  "group-id": {
                    "items": {
                      "type": "string"
                    },
                    "description": "All IDs of the image files which should be characterized.",
                    "type": "array"
                  },
                  "log-level": {
                    "$ref": "#/components/schemas/log-level"
                  },
                  "parameter": {
                    "items": {
                      "type": "string"
                    },
                    "description": "Parameter file in JSON format.",
                    "type": "array"
                  },
                  "output-file-grp": {
                    "items": {
                      "type": "string"
                    },
                    "description": "ID(s) of the fileGrps which have to be used as output. (fileGrp@USE).",
                    "type": "array"
                  },
                  "input-file-grp": {
                    "items": {
                      "type": "string"
                    },
                    "description": "ID(s) of the fileGrps which have to be used as input. (fileGrp@USE).",
                    "type": "array"
                  },
                  "mets": {
                    "$ref": "#/components/schemas/mets-file"
                  }
                },
                "description": "Object holding all parameters needed by most processors.",
                "required": [
                  "mets",
                  "input-file-grp",
                  "output-file-grp"
                ],
                "type": "object"
              }
            }
          }
        },
        "description": "OCR with kraken",
        "summary": "OCR with kraken",
        "responses": {
          "500": {
            "description": "Internal error"
          },
          "400": {
            "description": "Invalid input"
          },
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/job-id"
                }
              }
            },
            "headers": {
              "Location": {
                "schema": {
                  "format": "url",
                  "type": "string"
                },
                "description": "URL of the generated job."
              }
            },
            "links": {
              "GetFilesByJobId": {
                "operationId": "get-created-files-of-processor",
                "parameters": {
                  "jobID": "$response.body#/jobID"
                },
                "description": "The `jobId` value returned in the response can be used as the `jobID` parameter in `GET /ocrd/processor/jobid/{jobID}`.\n"
              }
            },
            "description": "Successful Operation. The created file(s) has/have to be referenced inside the given fileGrp sections."
          }
        }
      },
      "get": {
        "tags": [
          "Text recognition and optimization"
        ],
        "responses": {
          "200": {
            "application/json": {
              "schema": {
                "additionalProperties": false,
                "properties": {
                  "tools": {
                    "additionalProperties": false,
                    "patternProperties": {
                      "ocrd-.*": {
                        "properties": {
                          "parameters": {
                            "type": "object",
                            "patternProperties": {
                              ".*": {
                                "properties": {
                                  "default": {
                                    "description": "Default value when not provided by the user"
                                  },
                                  "format": {
                                    "description": "Subtype, such as `float` for type `number` or `uri` for type `string`."
                                  },
                                  "required": {
                                    "description": "Whether this parameter is required",
                                    "type": "boolean"
                                  },
                                  "enum": {
                                    "description": "List the allowed values if a fixed list.",
                                    "type": "array"
                                  },
                                  "type": {
                                    "description": "Data type of this parameter",
                                    "enum": [
                                      "string",
                                      "number",
                                      "boolean"
                                    ],
                                    "type": "string"
                                  }
                                },
                                "additionalProperties": false,
                                "required": [
                                  "type"
                                ],
                                "type": "object"
                              }
                            },
                            "description": "Object describing the parameters of a tool. Keys are parameter names, values sub-schemas."
                          },
                          "executable": {
                            "type": "string",
                            "description": "The name of the CLI executable in $PATH"
                          },
                          "steps": {
                            "items": {
                              "enum": [
                                "preprocessing/characterization",
                                "preprocessing/optimization",
                                "preprocessing/optimization/cropping",
                                "preprocessing/optimization/deskewing",
                                "preprocessing/optimization/despeckling",
                                "preprocessing/optimization/dewarping",
                                "preprocessing/optimization/binarization",
                                "preprocessing/optimization/grayscale_normalization",
                                "recognition/text-recognition",
                                "recognition/font-identification",
                                "layout/segmentation",
                                "layout/segmentation/region",
                                "layout/segmentation/line",
                                "layout/segmentation/word",
                                "layout/segmentation/classification",
                                "layout/analysis"
                              ],
                              "type": "string"
                            },
                            "type": "array",
                            "description": "This tool can be used at these steps in the OCR-D functional model"
                          },
                          "categories": {
                            "items": {
                              "enum": [
                                "Image preprocessing",
                                "Layout analysis",
                                "Text recognition and optimization",
                                "Model training",
                                "Long-term preservation",
                                "Quality assurance"
                              ],
                              "type": "string"
                            },
                            "type": "array",
                            "description": "Tools belong to this categories, representing modules within the OCR-D project structure"
                          },
                          "description": {
                            "description": "Concise description what the tool does"
                          }
                        },
                        "additionalProperties": false,
                        "required": [
                          "description",
                          "steps",
                          "executable",
                          "categories"
                        ],
                        "type": "object"
                      }
                    },
                    "type": "object"
                  },
                  "version": "v2.2.1",
                    "type": "string",
                    "pattern": "^[0-9]+\\.[0-9]+\\.[0-9]+$",
                    "description": "Version of the tool, expressed as MAJOR.MINOR.PATCH."
                  },
                  "git_url": {
                    "type": "string",
                    "format": "url",
                    "description": "Github/Gitlab URL"
                  },
                  "dockerhub": {
                    "type": "string",
                    "description": "DockerHub image"
                  }
                },
                "description": "Schema for tools by OCR-D MP",
                "required": [
                  "version",
                  "git_url",
                  "tools"
                ],
                "type": "object"
              },
              "description": "Got ocrd-tool.json"
            }
          }
        },
        "description": "Get ocrd-tool.json",
        "produces": []
      }
    },
    "/tesserocr-recognize/{_id}": {
      "delete": {
        "summary": "Delete all files created by job with ID 'jobID'.",
        "parameters": [
          {
            "in": "path",
            "schema": {
              "type": "string"
            },
            "name": "jobID",
            "required": true,
            "description": "job ID of the started process."
          }
        ],
        "tags": [
          "Text recognition and optimization"
        ],
        "responses": {
          "500": {
            "description": "Internal error"
          },
          "204": {
            "content": {
              "application/vnd.ocrd+job-status": {
                "schema": {
                  "$ref": "#/components/schemas/job-status"
                }
              }
            },
            "description": "Successful Operation. All linked resources are removed successfully."
          },
          "410": {
            "description": "Resource is not available anymore."
          },
          "404": {
            "description": "Not found."
          }
        }
      },
      "get": {
        "operationId": "get-created-files-of-processor",
        "parameters": [
          {
            "in": "path",
            "schema": {
              "type": "string"
            },
            "name": "jobID",
            "required": true,
            "description": "job ID of the started process."
          }
        ],
        "tags": [
          "Text recognition and optimization"
        ],
        "description": "Fetch all file created by job with id 'jobID'. If more than one file is created per mimetype use mimetype 'application/zip' as accept header to fetch all files at once.",
        "summary": "Get created files.",
        "responses": {
          "500": {
            "description": "Internal error"
          },
          "200": {
            "content": {
              "application/vnd.ocrd+job-status": {
                "schema": {
                  "$ref": "#/components/schemas/job-status"
                }
              },
              "application/vnd.ocrd.log+json": {
                "schema": {
                  "$ref": "#/components/schemas/logging"
                }
              },
              "application/zip": {
                "schema": {
                  "$ref": "#/components/schemas/zip-file"
                }
              },
              "application/mets+xml": {
                "schema": {
                  "$ref": "#/components/schemas/mets-file"
                }
              },
              "image/*": {
                "schema": {
                  "$ref": "#/components/schemas/image-file"
                }
              },
              "application/vnd.ocrd.prov+json": {
                "schema": {
                  "$ref": "#/components/schemas/provenance-file"
                }
              },
              "application/vnd.ocrd.page+xml": {
                "schema": {
                  "$ref": "#/components/schemas/page-file"
                }
              }
            },
            "description": "Successful Operation."
          },
          "400": {
            "description": "Bad request. Maybe more than one file of at least one mimetype was created. Please use mimetype 'application/zip' as accept header to fetch all files at once."
          }
        }
      }
    },
    "/kraken-segment": {
      "post": {
        "operationId": "start-processor",
        "tags": [
          "Layout analysis"
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "parameters": {
                  "properties": {},
                  "type": "object"
                },
                "properties": {
                  "group-id": {
                    "items": {
                      "type": "string"
                    },
                    "description": "All IDs of the image files which should be characterized.",
                    "type": "array"
                  },
                  "log-level": {
                    "$ref": "#/components/schemas/log-level"
                  },
                  "parameter": {
                    "items": {
                      "type": "string"
                    },
                    "description": "Parameter file in JSON format.",
                    "type": "array"
                  },
                  "output-file-grp": {
                    "items": {
                      "type": "string"
                    },
                    "description": "ID(s) of the fileGrps which have to be used as output. (fileGrp@USE).",
                    "type": "array"
                  },
                  "input-file-grp": {
                    "items": {
                      "type": "string"
                    },
                    "description": "ID(s) of the fileGrps which have to be used as input. (fileGrp@USE).",
                    "type": "array"
                  },
                  "mets": {
                    "$ref": "#/components/schemas/mets-file"
                  }
                },
                "description": "Object holding all parameters needed by most processors.",
                "required": [
                  "mets",
                  "input-file-grp",
                  "output-file-grp"
                ],
                "type": "object"
              }
            }
          }
        },
        "description": "Block segmentation with kraken",
        "summary": "Block segmentation with kraken",
        "responses": {
          "500": {
            "description": "Internal error"
          },
          "400": {
            "description": "Invalid input"
          },
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/job-id"
                }
              }
            },
            "headers": {
              "Location": {
                "schema": {
                  "format": "url",
                  "type": "string"
                },
                "description": "URL of the generated job."
              }
            },
            "links": {
              "GetFilesByJobId": {
                "operationId": "get-created-files-of-processor",
                "parameters": {
                  "jobID": "$response.body#/jobID"
                },
                "description": "The `jobId` value returned in the response can be used as the `jobID` parameter in `GET /ocrd/processor/jobid/{jobID}`.\n"
              }
            },
            "description": "Successful Operation. The created file(s) has/have to be referenced inside the given fileGrp sections."
          }
        }
      },
      "get": {
        "tags": [
          "Layout analysis"
        ],
        "responses": {
          "200": {
            "application/json": {
              "schema": {
                "additionalProperties": false,
                "properties": {
                  "tools": {
                    "additionalProperties": false,
                    "patternProperties": {
                      "ocrd-.*": {
                        "properties": {
                          "parameters": {
                            "type": "object",
                            "patternProperties": {
                              ".*": {
                                "properties": {
                                  "default": {
                                    "description": "Default value when not provided by the user"
                                  },
                                  "format": {
                                    "description": "Subtype, such as `float` for type `number` or `uri` for type `string`."
                                  },
                                  "required": {
                                    "description": "Whether this parameter is required",
                                    "type": "boolean"
                                  },
                                  "enum": {
                                    "description": "List the allowed values if a fixed list.",
                                    "type": "array"
                                  },
                                  "type": {
                                    "description": "Data type of this parameter",
                                    "enum": [
                                      "string",
                                      "number",
                                      "boolean"
                                    ],
                                    "type": "string"
                                  }
                                },
                                "additionalProperties": false,
                                "required": [
                                  "type"
                                ],
                                "type": "object"
                              }
                            },
                            "description": "Object describing the parameters of a tool. Keys are parameter names, values sub-schemas."
                          },
                          "executable": {
                            "type": "string",
                            "description": "The name of the CLI executable in $PATH"
                          },
                          "steps": {
                            "items": {
                              "enum": [
                                "preprocessing/characterization",
                                "preprocessing/optimization",
                                "preprocessing/optimization/cropping",
                                "preprocessing/optimization/deskewing",
                                "preprocessing/optimization/despeckling",
                                "preprocessing/optimization/dewarping",
                                "preprocessing/optimization/binarization",
                                "preprocessing/optimization/grayscale_normalization",
                                "recognition/text-recognition",
                                "recognition/font-identification",
                                "layout/segmentation",
                                "layout/segmentation/region",
                                "layout/segmentation/line",
                                "layout/segmentation/word",
                                "layout/segmentation/classification",
                                "layout/analysis"
                              ],
                              "type": "string"
                            },
                            "type": "array",
                            "description": "This tool can be used at these steps in the OCR-D functional model"
                          },
                          "categories": {
                            "items": {
                              "enum": [
                                "Image preprocessing",
                                "Layout analysis",
                                "Text recognition and optimization",
                                "Model training",
                                "Long-term preservation",
                                "Quality assurance"
                              ],
                              "type": "string"
                            },
                            "type": "array",
                            "description": "Tools belong to this categories, representing modules within the OCR-D project structure"
                          },
                          "description": {
                            "description": "Concise description what the tool does"
                          }
                        },
                        "additionalProperties": false,
                        "required": [
                          "description",
                          "steps",
                          "executable",
                          "categories"
                        ],
                        "type": "object"
                      }
                    },
                    "type": "object"
                  },
                  "version": "v2.2.1",
                    "type": "string",
                    "pattern": "^[0-9]+\\.[0-9]+\\.[0-9]+$",
                    "description": "Version of the tool, expressed as MAJOR.MINOR.PATCH."
                  },
                  "git_url": {
                    "type": "string",
                    "format": "url",
                    "description": "Github/Gitlab URL"
                  },
                  "dockerhub": {
                    "type": "string",
                    "description": "DockerHub image"
                  }
                },
                "description": "Schema for tools by OCR-D MP",
                "required": [
                  "version",
                  "git_url",
                  "tools"
                ],
                "type": "object"
              },
              "description": "Got ocrd-tool.json"
            }
          }
        },
        "description": "Get ocrd-tool.json",
        "produces": []
      }
    },
    "/tesserocr-segment-line/{_id}": {
      "delete": {
        "summary": "Delete all files created by job with ID 'jobID'.",
        "parameters": [
          {
            "in": "path",
            "schema": {
              "type": "string"
            },
            "name": "jobID",
            "required": true,
            "description": "job ID of the started process."
          }
        ],
        "tags": [
          "Layout analysis"
        ],
        "responses": {
          "500": {
            "description": "Internal error"
          },
          "204": {
            "content": {
              "application/vnd.ocrd+job-status": {
                "schema": {
                  "$ref": "#/components/schemas/job-status"
                }
              }
            },
            "description": "Successful Operation. All linked resources are removed successfully."
          },
          "410": {
            "description": "Resource is not available anymore."
          },
          "404": {
            "description": "Not found."
          }
        }
      },
      "get": {
        "operationId": "get-created-files-of-processor",
        "parameters": [
          {
            "in": "path",
            "schema": {
              "type": "string"
            },
            "name": "jobID",
            "required": true,
            "description": "job ID of the started process."
          }
        ],
        "tags": [
          "Layout analysis"
        ],
        "description": "Fetch all file created by job with id 'jobID'. If more than one file is created per mimetype use mimetype 'application/zip' as accept header to fetch all files at once.",
        "summary": "Get created files.",
        "responses": {
          "500": {
            "description": "Internal error"
          },
          "200": {
            "content": {
              "application/vnd.ocrd+job-status": {
                "schema": {
                  "$ref": "#/components/schemas/job-status"
                }
              },
              "application/vnd.ocrd.log+json": {
                "schema": {
                  "$ref": "#/components/schemas/logging"
                }
              },
              "application/zip": {
                "schema": {
                  "$ref": "#/components/schemas/zip-file"
                }
              },
              "application/mets+xml": {
                "schema": {
                  "$ref": "#/components/schemas/mets-file"
                }
              },
              "image/*": {
                "schema": {
                  "$ref": "#/components/schemas/image-file"
                }
              },
              "application/vnd.ocrd.prov+json": {
                "schema": {
                  "$ref": "#/components/schemas/provenance-file"
                }
              },
              "application/vnd.ocrd.page+xml": {
                "schema": {
                  "$ref": "#/components/schemas/page-file"
                }
              }
            },
            "description": "Successful Operation."
          },
          "400": {
            "description": "Bad request. Maybe more than one file of at least one mimetype was created. Please use mimetype 'application/zip' as accept header to fetch all files at once."
          }
        }
      }
    },
    "/tesserocr-segment-region/{_id}": {
      "delete": {
        "summary": "Delete all files created by job with ID 'jobID'.",
        "parameters": [
          {
            "in": "path",
            "schema": {
              "type": "string"
            },
            "name": "jobID",
            "required": true,
            "description": "job ID of the started process."
          }
        ],
        "tags": [
          "Layout analysis"
        ],
        "responses": {
          "500": {
            "description": "Internal error"
          },
          "204": {
            "content": {
              "application/vnd.ocrd+job-status": {
                "schema": {
                  "$ref": "#/components/schemas/job-status"
                }
              }
            },
            "description": "Successful Operation. All linked resources are removed successfully."
          },
          "410": {
            "description": "Resource is not available anymore."
          },
          "404": {
            "description": "Not found."
          }
        }
      },
      "get": {
        "operationId": "get-created-files-of-processor",
        "parameters": [
          {
            "in": "path",
            "schema": {
              "type": "string"
            },
            "name": "jobID",
            "required": true,
            "description": "job ID of the started process."
          }
        ],
        "tags": [
          "Layout analysis"
        ],
        "description": "Fetch all file created by job with id 'jobID'. If more than one file is created per mimetype use mimetype 'application/zip' as accept header to fetch all files at once.",
        "summary": "Get created files.",
        "responses": {
          "500": {
            "description": "Internal error"
          },
          "200": {
            "content": {
              "application/vnd.ocrd+job-status": {
                "schema": {
                  "$ref": "#/components/schemas/job-status"
                }
              },
              "application/vnd.ocrd.log+json": {
                "schema": {
                  "$ref": "#/components/schemas/logging"
                }
              },
              "application/zip": {
                "schema": {
                  "$ref": "#/components/schemas/zip-file"
                }
              },
              "application/mets+xml": {
                "schema": {
                  "$ref": "#/components/schemas/mets-file"
                }
              },
              "image/*": {
                "schema": {
                  "$ref": "#/components/schemas/image-file"
                }
              },
              "application/vnd.ocrd.prov+json": {
                "schema": {
                  "$ref": "#/components/schemas/provenance-file"
                }
              },
              "application/vnd.ocrd.page+xml": {
                "schema": {
                  "$ref": "#/components/schemas/page-file"
                }
              }
            },
            "description": "Successful Operation."
          },
          "400": {
            "description": "Bad request. Maybe more than one file of at least one mimetype was created. Please use mimetype 'application/zip' as accept header to fetch all files at once."
          }
        }
      }
    },
    "/tesserocr-segment-line": {
      "post": {
        "operationId": "start-processor",
        "tags": [
          "Layout analysis"
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "parameters": {
                  "properties": {},
                  "type": "object"
                },
                "properties": {
                  "group-id": {
                    "items": {
                      "type": "string"
                    },
                    "description": "All IDs of the image files which should be characterized.",
                    "type": "array"
                  },
                  "log-level": {
                    "$ref": "#/components/schemas/log-level"
                  },
                  "parameter": {
                    "items": {
                      "type": "string"
                    },
                    "description": "Parameter file in JSON format.",
                    "type": "array"
                  },
                  "output-file-grp": {
                    "items": {
                      "type": "string"
                    },
                    "description": "ID(s) of the fileGrps which have to be used as output. (fileGrp@USE).",
                    "type": "array"
                  },
                  "input-file-grp": {
                    "items": {
                      "type": "string"
                    },
                    "description": "ID(s) of the fileGrps which have to be used as input. (fileGrp@USE).",
                    "type": "array"
                  },
                  "mets": {
                    "$ref": "#/components/schemas/mets-file"
                  }
                },
                "description": "Object holding all parameters needed by most processors.",
                "required": [
                  "mets",
                  "input-file-grp",
                  "output-file-grp"
                ],
                "type": "object"
              }
            }
          }
        },
        "description": "Segment page into regions with tesseract",
        "summary": "Segment page into regions with tesseract",
        "responses": {
          "500": {
            "description": "Internal error"
          },
          "400": {
            "description": "Invalid input"
          },
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/job-id"
                }
              }
            },
            "headers": {
              "Location": {
                "schema": {
                  "format": "url",
                  "type": "string"
                },
                "description": "URL of the generated job."
              }
            },
            "links": {
              "GetFilesByJobId": {
                "operationId": "get-created-files-of-processor",
                "parameters": {
                  "jobID": "$response.body#/jobID"
                },
                "description": "The `jobId` value returned in the response can be used as the `jobID` parameter in `GET /ocrd/processor/jobid/{jobID}`.\n"
              }
            },
            "description": "Successful Operation. The created file(s) has/have to be referenced inside the given fileGrp sections."
          }
        }
      },
      "get": {
        "tags": [
          "Layout analysis"
        ],
        "responses": {
          "200": {
            "application/json": {
              "schema": {
                "additionalProperties": false,
                "properties": {
                  "tools": {
                    "additionalProperties": false,
                    "patternProperties": {
                      "ocrd-.*": {
                        "properties": {
                          "parameters": {
                            "type": "object",
                            "patternProperties": {
                              ".*": {
                                "properties": {
                                  "default": {
                                    "description": "Default value when not provided by the user"
                                  },
                                  "format": {
                                    "description": "Subtype, such as `float` for type `number` or `uri` for type `string`."
                                  },
                                  "required": {
                                    "description": "Whether this parameter is required",
                                    "type": "boolean"
                                  },
                                  "enum": {
                                    "description": "List the allowed values if a fixed list.",
                                    "type": "array"
                                  },
                                  "type": {
                                    "description": "Data type of this parameter",
                                    "enum": [
                                      "string",
                                      "number",
                                      "boolean"
                                    ],
                                    "type": "string"
                                  }
                                },
                                "additionalProperties": false,
                                "required": [
                                  "type"
                                ],
                                "type": "object"
                              }
                            },
                            "description": "Object describing the parameters of a tool. Keys are parameter names, values sub-schemas."
                          },
                          "executable": {
                            "type": "string",
                            "description": "The name of the CLI executable in $PATH"
                          },
                          "steps": {
                            "items": {
                              "enum": [
                                "preprocessing/characterization",
                                "preprocessing/optimization",
                                "preprocessing/optimization/cropping",
                                "preprocessing/optimization/deskewing",
                                "preprocessing/optimization/despeckling",
                                "preprocessing/optimization/dewarping",
                                "preprocessing/optimization/binarization",
                                "preprocessing/optimization/grayscale_normalization",
                                "recognition/text-recognition",
                                "recognition/font-identification",
                                "layout/segmentation",
                                "layout/segmentation/region",
                                "layout/segmentation/line",
                                "layout/segmentation/word",
                                "layout/segmentation/classification",
                                "layout/analysis"
                              ],
                              "type": "string"
                            },
                            "type": "array",
                            "description": "This tool can be used at these steps in the OCR-D functional model"
                          },
                          "categories": {
                            "items": {
                              "enum": [
                                "Image preprocessing",
                                "Layout analysis",
                                "Text recognition and optimization",
                                "Model training",
                                "Long-term preservation",
                                "Quality assurance"
                              ],
                              "type": "string"
                            },
                            "type": "array",
                            "description": "Tools belong to this categories, representing modules within the OCR-D project structure"
                          },
                          "description": {
                            "description": "Concise description what the tool does"
                          }
                        },
                        "additionalProperties": false,
                        "required": [
                          "description",
                          "steps",
                          "executable",
                          "categories"
                        ],
                        "type": "object"
                      }
                    },
                    "type": "object"
                  },
                  "version": "v2.2.1",
                    "type": "string",
                    "pattern": "^[0-9]+\\.[0-9]+\\.[0-9]+$",
                    "description": "Version of the tool, expressed as MAJOR.MINOR.PATCH."
                  },
                  "git_url": {
                    "type": "string",
                    "format": "url",
                    "description": "Github/Gitlab URL"
                  },
                  "dockerhub": {
                    "type": "string",
                    "description": "DockerHub image"
                  }
                },
                "description": "Schema for tools by OCR-D MP",
                "required": [
                  "version",
                  "git_url",
                  "tools"
                ],
                "type": "object"
              },
              "description": "Got ocrd-tool.json"
            }
          }
        },
        "description": "Get ocrd-tool.json",
        "produces": []
      }
    },
    "/kraken-binarize/{_id}": {
      "delete": {
        "summary": "Delete all files created by job with ID 'jobID'.",
        "parameters": [
          {
            "in": "path",
            "schema": {
              "type": "string"
            },
            "name": "jobID",
            "required": true,
            "description": "job ID of the started process."
          }
        ],
        "tags": [
          "Image preprocessing"
        ],
        "responses": {
          "500": {
            "description": "Internal error"
          },
          "204": {
            "content": {
              "application/vnd.ocrd+job-status": {
                "schema": {
                  "$ref": "#/components/schemas/job-status"
                }
              }
            },
            "description": "Successful Operation. All linked resources are removed successfully."
          },
          "410": {
            "description": "Resource is not available anymore."
          },
          "404": {
            "description": "Not found."
          }
        }
      },
      "get": {
        "operationId": "get-created-files-of-processor",
        "parameters": [
          {
            "in": "path",
            "schema": {
              "type": "string"
            },
            "name": "jobID",
            "required": true,
            "description": "job ID of the started process."
          }
        ],
        "tags": [
          "Image preprocessing"
        ],
        "description": "Fetch all file created by job with id 'jobID'. If more than one file is created per mimetype use mimetype 'application/zip' as accept header to fetch all files at once.",
        "summary": "Get created files.",
        "responses": {
          "500": {
            "description": "Internal error"
          },
          "200": {
            "content": {
              "application/vnd.ocrd+job-status": {
                "schema": {
                  "$ref": "#/components/schemas/job-status"
                }
              },
              "application/vnd.ocrd.log+json": {
                "schema": {
                  "$ref": "#/components/schemas/logging"
                }
              },
              "application/zip": {
                "schema": {
                  "$ref": "#/components/schemas/zip-file"
                }
              },
              "application/mets+xml": {
                "schema": {
                  "$ref": "#/components/schemas/mets-file"
                }
              },
              "image/*": {
                "schema": {
                  "$ref": "#/components/schemas/image-file"
                }
              },
              "application/vnd.ocrd.prov+json": {
                "schema": {
                  "$ref": "#/components/schemas/provenance-file"
                }
              },
              "application/vnd.ocrd.page+xml": {
                "schema": {
                  "$ref": "#/components/schemas/page-file"
                }
              }
            },
            "description": "Successful Operation."
          },
          "400": {
            "description": "Bad request. Maybe more than one file of at least one mimetype was created. Please use mimetype 'application/zip' as accept header to fetch all files at once."
          }
        }
      }
    },
    "/tesserocr-segment-region": {
      "post": {
        "operationId": "start-processor",
        "tags": [
          "Layout analysis"
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "parameters": {
                  "properties": {},
                  "type": "object"
                },
                "properties": {
                  "group-id": {
                    "items": {
                      "type": "string"
                    },
                    "description": "All IDs of the image files which should be characterized.",
                    "type": "array"
                  },
                  "log-level": {
                    "$ref": "#/components/schemas/log-level"
                  },
                  "parameter": {
                    "items": {
                      "type": "string"
                    },
                    "description": "Parameter file in JSON format.",
                    "type": "array"
                  },
                  "output-file-grp": {
                    "items": {
                      "type": "string"
                    },
                    "description": "ID(s) of the fileGrps which have to be used as output. (fileGrp@USE).",
                    "type": "array"
                  },
                  "input-file-grp": {
                    "items": {
                      "type": "string"
                    },
                    "description": "ID(s) of the fileGrps which have to be used as input. (fileGrp@USE).",
                    "type": "array"
                  },
                  "mets": {
                    "$ref": "#/components/schemas/mets-file"
                  }
                },
                "description": "Object holding all parameters needed by most processors.",
                "required": [
                  "mets",
                  "input-file-grp",
                  "output-file-grp"
                ],
                "type": "object"
              }
            }
          }
        },
        "description": "Segment regions into lines with tesseract",
        "summary": "Segment regions into lines with tesseract",
        "responses": {
          "500": {
            "description": "Internal error"
          },
          "400": {
            "description": "Invalid input"
          },
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/job-id"
                }
              }
            },
            "headers": {
              "Location": {
                "schema": {
                  "format": "url",
                  "type": "string"
                },
                "description": "URL of the generated job."
              }
            },
            "links": {
              "GetFilesByJobId": {
                "operationId": "get-created-files-of-processor",
                "parameters": {
                  "jobID": "$response.body#/jobID"
                },
                "description": "The `jobId` value returned in the response can be used as the `jobID` parameter in `GET /ocrd/processor/jobid/{jobID}`.\n"
              }
            },
            "description": "Successful Operation. The created file(s) has/have to be referenced inside the given fileGrp sections."
          }
        }
      },
      "get": {
        "tags": [
          "Layout analysis"
        ],
        "responses": {
          "200": {
            "application/json": {
              "schema": {
                "additionalProperties": false,
                "properties": {
                  "tools": {
                    "additionalProperties": false,
                    "patternProperties": {
                      "ocrd-.*": {
                        "properties": {
                          "parameters": {
                            "type": "object",
                            "patternProperties": {
                              ".*": {
                                "properties": {
                                  "default": {
                                    "description": "Default value when not provided by the user"
                                  },
                                  "format": {
                                    "description": "Subtype, such as `float` for type `number` or `uri` for type `string`."
                                  },
                                  "required": {
                                    "description": "Whether this parameter is required",
                                    "type": "boolean"
                                  },
                                  "enum": {
                                    "description": "List the allowed values if a fixed list.",
                                    "type": "array"
                                  },
                                  "type": {
                                    "description": "Data type of this parameter",
                                    "enum": [
                                      "string",
                                      "number",
                                      "boolean"
                                    ],
                                    "type": "string"
                                  }
                                },
                                "additionalProperties": false,
                                "required": [
                                  "type"
                                ],
                                "type": "object"
                              }
                            },
                            "description": "Object describing the parameters of a tool. Keys are parameter names, values sub-schemas."
                          },
                          "executable": {
                            "type": "string",
                            "description": "The name of the CLI executable in $PATH"
                          },
                          "steps": {
                            "items": {
                              "enum": [
                                "preprocessing/characterization",
                                "preprocessing/optimization",
                                "preprocessing/optimization/cropping",
                                "preprocessing/optimization/deskewing",
                                "preprocessing/optimization/despeckling",
                                "preprocessing/optimization/dewarping",
                                "preprocessing/optimization/binarization",
                                "preprocessing/optimization/grayscale_normalization",
                                "recognition/text-recognition",
                                "recognition/font-identification",
                                "layout/segmentation",
                                "layout/segmentation/region",
                                "layout/segmentation/line",
                                "layout/segmentation/word",
                                "layout/segmentation/classification",
                                "layout/analysis"
                              ],
                              "type": "string"
                            },
                            "type": "array",
                            "description": "This tool can be used at these steps in the OCR-D functional model"
                          },
                          "categories": {
                            "items": {
                              "enum": [
                                "Image preprocessing",
                                "Layout analysis",
                                "Text recognition and optimization",
                                "Model training",
                                "Long-term preservation",
                                "Quality assurance"
                              ],
                              "type": "string"
                            },
                            "type": "array",
                            "description": "Tools belong to this categories, representing modules within the OCR-D project structure"
                          },
                          "description": {
                            "description": "Concise description what the tool does"
                          }
                        },
                        "additionalProperties": false,
                        "required": [
                          "description",
                          "steps",
                          "executable",
                          "categories"
                        ],
                        "type": "object"
                      }
                    },
                    "type": "object"
                  },
                  "version": "v2.2.1",
                    "type": "string",
                    "pattern": "^[0-9]+\\.[0-9]+\\.[0-9]+$",
                    "description": "Version of the tool, expressed as MAJOR.MINOR.PATCH."
                  },
                  "git_url": {
                    "type": "string",
                    "format": "url",
                    "description": "Github/Gitlab URL"
                  },
                  "dockerhub": {
                    "type": "string",
                    "description": "DockerHub image"
                  }
                },
                "description": "Schema for tools by OCR-D MP",
                "required": [
                  "version",
                  "git_url",
                  "tools"
                ],
                "type": "object"
              },
              "description": "Got ocrd-tool.json"
            }
          }
        },
        "description": "Get ocrd-tool.json",
        "produces": []
      }
    },
    "/tesserocr-recognize": {
      "post": {
        "operationId": "start-processor",
        "tags": [
          "Text recognition and optimization"
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "parameters": {
                  "properties": {},
                  "type": "object"
                },
                "properties": {
                  "group-id": {
                    "items": {
                      "type": "string"
                    },
                    "description": "All IDs of the image files which should be characterized.",
                    "type": "array"
                  },
                  "log-level": {
                    "$ref": "#/components/schemas/log-level"
                  },
                  "parameter": {
                    "items": {
                      "type": "string"
                    },
                    "description": "Parameter file in JSON format.",
                    "type": "array"
                  },
                  "output-file-grp": {
                    "items": {
                      "type": "string"
                    },
                    "description": "ID(s) of the fileGrps which have to be used as output. (fileGrp@USE).",
                    "type": "array"
                  },
                  "input-file-grp": {
                    "items": {
                      "type": "string"
                    },
                    "description": "ID(s) of the fileGrps which have to be used as input. (fileGrp@USE).",
                    "type": "array"
                  },
                  "mets": {
                    "$ref": "#/components/schemas/mets-file"
                  }
                },
                "description": "Object holding all parameters needed by most processors.",
                "required": [
                  "mets",
                  "input-file-grp",
                  "output-file-grp"
                ],
                "type": "object"
              }
            }
          }
        },
        "description": "Recognize text in lines with tesseract",
        "summary": "Recognize text in lines with tesseract",
        "responses": {
          "500": {
            "description": "Internal error"
          },
          "400": {
            "description": "Invalid input"
          },
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/job-id"
                }
              }
            },
            "headers": {
              "Location": {
                "schema": {
                  "format": "url",
                  "type": "string"
                },
                "description": "URL of the generated job."
              }
            },
            "links": {
              "GetFilesByJobId": {
                "operationId": "get-created-files-of-processor",
                "parameters": {
                  "jobID": "$response.body#/jobID"
                },
                "description": "The `jobId` value returned in the response can be used as the `jobID` parameter in `GET /ocrd/processor/jobid/{jobID}`.\n"
              }
            },
            "description": "Successful Operation. The created file(s) has/have to be referenced inside the given fileGrp sections."
          }
        }
      },
      "get": {
        "tags": [
          "Text recognition and optimization"
        ],
        "responses": {
          "200": {
            "application/json": {
              "schema": {
                "additionalProperties": false,
                "properties": {
                  "tools": {
                    "additionalProperties": false,
                    "patternProperties": {
                      "ocrd-.*": {
                        "properties": {
                          "parameters": {
                            "type": "object",
                            "patternProperties": {
                              ".*": {
                                "properties": {
                                  "default": {
                                    "description": "Default value when not provided by the user"
                                  },
                                  "format": {
                                    "description": "Subtype, such as `float` for type `number` or `uri` for type `string`."
                                  },
                                  "required": {
                                    "description": "Whether this parameter is required",
                                    "type": "boolean"
                                  },
                                  "enum": {
                                    "description": "List the allowed values if a fixed list.",
                                    "type": "array"
                                  },
                                  "type": {
                                    "description": "Data type of this parameter",
                                    "enum": [
                                      "string",
                                      "number",
                                      "boolean"
                                    ],
                                    "type": "string"
                                  }
                                },
                                "additionalProperties": false,
                                "required": [
                                  "type"
                                ],
                                "type": "object"
                              }
                            },
                            "description": "Object describing the parameters of a tool. Keys are parameter names, values sub-schemas."
                          },
                          "executable": {
                            "type": "string",
                            "description": "The name of the CLI executable in $PATH"
                          },
                          "steps": {
                            "items": {
                              "enum": [
                                "preprocessing/characterization",
                                "preprocessing/optimization",
                                "preprocessing/optimization/cropping",
                                "preprocessing/optimization/deskewing",
                                "preprocessing/optimization/despeckling",
                                "preprocessing/optimization/dewarping",
                                "preprocessing/optimization/binarization",
                                "preprocessing/optimization/grayscale_normalization",
                                "recognition/text-recognition",
                                "recognition/font-identification",
                                "layout/segmentation",
                                "layout/segmentation/region",
                                "layout/segmentation/line",
                                "layout/segmentation/word",
                                "layout/segmentation/classification",
                                "layout/analysis"
                              ],
                              "type": "string"
                            },
                            "type": "array",
                            "description": "This tool can be used at these steps in the OCR-D functional model"
                          },
                          "categories": {
                            "items": {
                              "enum": [
                                "Image preprocessing",
                                "Layout analysis",
                                "Text recognition and optimization",
                                "Model training",
                                "Long-term preservation",
                                "Quality assurance"
                              ],
                              "type": "string"
                            },
                            "type": "array",
                            "description": "Tools belong to this categories, representing modules within the OCR-D project structure"
                          },
                          "description": {
                            "description": "Concise description what the tool does"
                          }
                        },
                        "additionalProperties": false,
                        "required": [
                          "description",
                          "steps",
                          "executable",
                          "categories"
                        ],
                        "type": "object"
                      }
                    },
                    "type": "object"
                  },
                  "version": "v2.2.1",
                    "type": "string",
                    "pattern": "^[0-9]+\\.[0-9]+\\.[0-9]+$",
                    "description": "Version of the tool, expressed as MAJOR.MINOR.PATCH."
                  },
                  "git_url": {
                    "type": "string",
                    "format": "url",
                    "description": "Github/Gitlab URL"
                  },
                  "dockerhub": {
                    "type": "string",
                    "description": "DockerHub image"
                  }
                },
                "description": "Schema for tools by OCR-D MP",
                "required": [
                  "version",
                  "git_url",
                  "tools"
                ],
                "type": "object"
              },
              "description": "Got ocrd-tool.json"
            }
          }
        },
        "description": "Get ocrd-tool.json",
        "produces": []
      }
    },
    "/kraken-segment/{_id}": {
      "delete": {
        "summary": "Delete all files created by job with ID 'jobID'.",
        "parameters": [
          {
            "in": "path",
            "schema": {
              "type": "string"
            },
            "name": "jobID",
            "required": true,
            "description": "job ID of the started process."
          }
        ],
        "tags": [
          "Layout analysis"
        ],
        "responses": {
          "500": {
            "description": "Internal error"
          },
          "204": {
            "content": {
              "application/vnd.ocrd+job-status": {
                "schema": {
                  "$ref": "#/components/schemas/job-status"
                }
              }
            },
            "description": "Successful Operation. All linked resources are removed successfully."
          },
          "410": {
            "description": "Resource is not available anymore."
          },
          "404": {
            "description": "Not found."
          }
        }
      },
      "get": {
        "operationId": "get-created-files-of-processor",
        "parameters": [
          {
            "in": "path",
            "schema": {
              "type": "string"
            },
            "name": "jobID",
            "required": true,
            "description": "job ID of the started process."
          }
        ],
        "tags": [
          "Layout analysis"
        ],
        "description": "Fetch all file created by job with id 'jobID'. If more than one file is created per mimetype use mimetype 'application/zip' as accept header to fetch all files at once.",
        "summary": "Get created files.",
        "responses": {
          "500": {
            "description": "Internal error"
          },
          "200": {
            "content": {
              "application/vnd.ocrd+job-status": {
                "schema": {
                  "$ref": "#/components/schemas/job-status"
                }
              },
              "application/vnd.ocrd.log+json": {
                "schema": {
                  "$ref": "#/components/schemas/logging"
                }
              },
              "application/zip": {
                "schema": {
                  "$ref": "#/components/schemas/zip-file"
                }
              },
              "application/mets+xml": {
                "schema": {
                  "$ref": "#/components/schemas/mets-file"
                }
              },
              "image/*": {
                "schema": {
                  "$ref": "#/components/schemas/image-file"
                }
              },
              "application/vnd.ocrd.prov+json": {
                "schema": {
                  "$ref": "#/components/schemas/provenance-file"
                }
              },
              "application/vnd.ocrd.page+xml": {
                "schema": {
                  "$ref": "#/components/schemas/page-file"
                }
              }
            },
            "description": "Successful Operation."
          },
          "400": {
            "description": "Bad request. Maybe more than one file of at least one mimetype was created. Please use mimetype 'application/zip' as accept header to fetch all files at once."
          }
        }
      }
    },
    "/tesserocr-segment-word": {
      "post": {
        "operationId": "start-processor",
        "tags": [
          "Layout analysis"
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "parameters": {
                  "properties": {},
                  "type": "object"
                },
                "properties": {
                  "group-id": {
                    "items": {
                      "type": "string"
                    },
                    "description": "All IDs of the image files which should be characterized.",
                    "type": "array"
                  },
                  "log-level": {
                    "$ref": "#/components/schemas/log-level"
                  },
                  "parameter": {
                    "items": {
                      "type": "string"
                    },
                    "description": "Parameter file in JSON format.",
                    "type": "array"
                  },
                  "output-file-grp": {
                    "items": {
                      "type": "string"
                    },
                    "description": "ID(s) of the fileGrps which have to be used as output. (fileGrp@USE).",
                    "type": "array"
                  },
                  "input-file-grp": {
                    "items": {
                      "type": "string"
                    },
                    "description": "ID(s) of the fileGrps which have to be used as input. (fileGrp@USE).",
                    "type": "array"
                  },
                  "mets": {
                    "$ref": "#/components/schemas/mets-file"
                  }
                },
                "description": "Object holding all parameters needed by most processors.",
                "required": [
                  "mets",
                  "input-file-grp",
                  "output-file-grp"
                ],
                "type": "object"
              }
            }
          }
        },
        "description": "Segment lines into words with tesseract",
        "summary": "Segment lines into words with tesseract",
        "responses": {
          "500": {
            "description": "Internal error"
          },
          "400": {
            "description": "Invalid input"
          },
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/job-id"
                }
              }
            },
            "headers": {
              "Location": {
                "schema": {
                  "format": "url",
                  "type": "string"
                },
                "description": "URL of the generated job."
              }
            },
            "links": {
              "GetFilesByJobId": {
                "operationId": "get-created-files-of-processor",
                "parameters": {
                  "jobID": "$response.body#/jobID"
                },
                "description": "The `jobId` value returned in the response can be used as the `jobID` parameter in `GET /ocrd/processor/jobid/{jobID}`.\n"
              }
            },
            "description": "Successful Operation. The created file(s) has/have to be referenced inside the given fileGrp sections."
          }
        }
      },
      "get": {
        "tags": [
          "Layout analysis"
        ],
        "responses": {
          "200": {
            "application/json": {
              "schema": {
                "additionalProperties": false,
                "properties": {
                  "tools": {
                    "additionalProperties": false,
                    "patternProperties": {
                      "ocrd-.*": {
                        "properties": {
                          "parameters": {
                            "type": "object",
                            "patternProperties": {
                              ".*": {
                                "properties": {
                                  "default": {
                                    "description": "Default value when not provided by the user"
                                  },
                                  "format": {
                                    "description": "Subtype, such as `float` for type `number` or `uri` for type `string`."
                                  },
                                  "required": {
                                    "description": "Whether this parameter is required",
                                    "type": "boolean"
                                  },
                                  "enum": {
                                    "description": "List the allowed values if a fixed list.",
                                    "type": "array"
                                  },
                                  "type": {
                                    "description": "Data type of this parameter",
                                    "enum": [
                                      "string",
                                      "number",
                                      "boolean"
                                    ],
                                    "type": "string"
                                  }
                                },
                                "additionalProperties": false,
                                "required": [
                                  "type"
                                ],
                                "type": "object"
                              }
                            },
                            "description": "Object describing the parameters of a tool. Keys are parameter names, values sub-schemas."
                          },
                          "executable": {
                            "type": "string",
                            "description": "The name of the CLI executable in $PATH"
                          },
                          "steps": {
                            "items": {
                              "enum": [
                                "preprocessing/characterization",
                                "preprocessing/optimization",
                                "preprocessing/optimization/cropping",
                                "preprocessing/optimization/deskewing",
                                "preprocessing/optimization/despeckling",
                                "preprocessing/optimization/dewarping",
                                "preprocessing/optimization/binarization",
                                "preprocessing/optimization/grayscale_normalization",
                                "recognition/text-recognition",
                                "recognition/font-identification",
                                "layout/segmentation",
                                "layout/segmentation/region",
                                "layout/segmentation/line",
                                "layout/segmentation/word",
                                "layout/segmentation/classification",
                                "layout/analysis"
                              ],
                              "type": "string"
                            },
                            "type": "array",
                            "description": "This tool can be used at these steps in the OCR-D functional model"
                          },
                          "categories": {
                            "items": {
                              "enum": [
                                "Image preprocessing",
                                "Layout analysis",
                                "Text recognition and optimization",
                                "Model training",
                                "Long-term preservation",
                                "Quality assurance"
                              ],
                              "type": "string"
                            },
                            "type": "array",
                            "description": "Tools belong to this categories, representing modules within the OCR-D project structure"
                          },
                          "description": {
                            "description": "Concise description what the tool does"
                          }
                        },
                        "additionalProperties": false,
                        "required": [
                          "description",
                          "steps",
                          "executable",
                          "categories"
                        ],
                        "type": "object"
                      }
                    },
                    "type": "object"
                  },
                  "version": "v2.2.1",
                    "type": "string",
                    "pattern": "^[0-9]+\\.[0-9]+\\.[0-9]+$",
                    "description": "Version of the tool, expressed as MAJOR.MINOR.PATCH."
                  },
                  "git_url": {
                    "type": "string",
                    "format": "url",
                    "description": "Github/Gitlab URL"
                  },
                  "dockerhub": {
                    "type": "string",
                    "description": "DockerHub image"
                  }
                },
                "description": "Schema for tools by OCR-D MP",
                "required": [
                  "version",
                  "git_url",
                  "tools"
                ],
                "type": "object"
              },
              "description": "Got ocrd-tool.json"
            }
          }
        },
        "description": "Get ocrd-tool.json",
        "produces": []
      }
    },
    "/kraken-binarize": {
      "post": {
        "operationId": "start-processor",
        "tags": [
          "Image preprocessing"
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "parameters": {
                  "properties": {},
                  "type": "object"
                },
                "properties": {
                  "group-id": {
                    "items": {
                      "type": "string"
                    },
                    "description": "All IDs of the image files which should be characterized.",
                    "type": "array"
                  },
                  "log-level": {
                    "$ref": "#/components/schemas/log-level"
                  },
                  "parameter": {
                    "items": {
                      "type": "string"
                    },
                    "description": "Parameter file in JSON format.",
                    "type": "array"
                  },
                  "output-file-grp": {
                    "items": {
                      "type": "string"
                    },
                    "description": "ID(s) of the fileGrps which have to be used as output. (fileGrp@USE).",
                    "type": "array"
                  },
                  "input-file-grp": {
                    "items": {
                      "type": "string"
                    },
                    "description": "ID(s) of the fileGrps which have to be used as input. (fileGrp@USE).",
                    "type": "array"
                  },
                  "mets": {
                    "$ref": "#/components/schemas/mets-file"
                  }
                },
                "description": "Object holding all parameters needed by most processors.",
                "required": [
                  "mets",
                  "input-file-grp",
                  "output-file-grp"
                ],
                "type": "object"
              }
            }
          }
        },
        "description": "Binarize images with kraken",
        "summary": "Binarize images with kraken",
        "responses": {
          "500": {
            "description": "Internal error"
          },
          "400": {
            "description": "Invalid input"
          },
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/job-id"
                }
              }
            },
            "headers": {
              "Location": {
                "schema": {
                  "format": "url",
                  "type": "string"
                },
                "description": "URL of the generated job."
              }
            },
            "links": {
              "GetFilesByJobId": {
                "operationId": "get-created-files-of-processor",
                "parameters": {
                  "jobID": "$response.body#/jobID"
                },
                "description": "The `jobId` value returned in the response can be used as the `jobID` parameter in `GET /ocrd/processor/jobid/{jobID}`.\n"
              }
            },
            "description": "Successful Operation. The created file(s) has/have to be referenced inside the given fileGrp sections."
          }
        }
      },
      "get": {
        "tags": [
          "Image preprocessing"
        ],
        "responses": {
          "200": {
            "application/json": {
              "schema": {
                "additionalProperties": false,
                "properties": {
                  "tools": {
                    "additionalProperties": false,
                    "patternProperties": {
                      "ocrd-.*": {
                        "properties": {
                          "parameters": {
                            "type": "object",
                            "patternProperties": {
                              ".*": {
                                "properties": {
                                  "default": {
                                    "description": "Default value when not provided by the user"
                                  },
                                  "format": {
                                    "description": "Subtype, such as `float` for type `number` or `uri` for type `string`."
                                  },
                                  "required": {
                                    "description": "Whether this parameter is required",
                                    "type": "boolean"
                                  },
                                  "enum": {
                                    "description": "List the allowed values if a fixed list.",
                                    "type": "array"
                                  },
                                  "type": {
                                    "description": "Data type of this parameter",
                                    "enum": [
                                      "string",
                                      "number",
                                      "boolean"
                                    ],
                                    "type": "string"
                                  }
                                },
                                "additionalProperties": false,
                                "required": [
                                  "type"
                                ],
                                "type": "object"
                              }
                            },
                            "description": "Object describing the parameters of a tool. Keys are parameter names, values sub-schemas."
                          },
                          "executable": {
                            "type": "string",
                            "description": "The name of the CLI executable in $PATH"
                          },
                          "steps": {
                            "items": {
                              "enum": [
                                "preprocessing/characterization",
                                "preprocessing/optimization",
                                "preprocessing/optimization/cropping",
                                "preprocessing/optimization/deskewing",
                                "preprocessing/optimization/despeckling",
                                "preprocessing/optimization/dewarping",
                                "preprocessing/optimization/binarization",
                                "preprocessing/optimization/grayscale_normalization",
                                "recognition/text-recognition",
                                "recognition/font-identification",
                                "layout/segmentation",
                                "layout/segmentation/region",
                                "layout/segmentation/line",
                                "layout/segmentation/word",
                                "layout/segmentation/classification",
                                "layout/analysis"
                              ],
                              "type": "string"
                            },
                            "type": "array",
                            "description": "This tool can be used at these steps in the OCR-D functional model"
                          },
                          "categories": {
                            "items": {
                              "enum": [
                                "Image preprocessing",
                                "Layout analysis",
                                "Text recognition and optimization",
                                "Model training",
                                "Long-term preservation",
                                "Quality assurance"
                              ],
                              "type": "string"
                            },
                            "type": "array",
                            "description": "Tools belong to this categories, representing modules within the OCR-D project structure"
                          },
                          "description": {
                            "description": "Concise description what the tool does"
                          }
                        },
                        "additionalProperties": false,
                        "required": [
                          "description",
                          "steps",
                          "executable",
                          "categories"
                        ],
                        "type": "object"
                      }
                    },
                    "type": "object"
                  },
                  "version": "v2.2.1",
                    "type": "string",
                    "pattern": "^[0-9]+\\.[0-9]+\\.[0-9]+$",
                    "description": "Version of the tool, expressed as MAJOR.MINOR.PATCH."
                  },
                  "git_url": {
                    "type": "string",
                    "format": "url",
                    "description": "Github/Gitlab URL"
                  },
                  "dockerhub": {
                    "type": "string",
                    "description": "DockerHub image"
                  }
                },
                "description": "Schema for tools by OCR-D MP",
                "required": [
                  "version",
                  "git_url",
                  "tools"
                ],
                "type": "object"
              },
              "description": "Got ocrd-tool.json"
            }
          }
        },
        "description": "Get ocrd-tool.json",
        "produces": []
      }
    },
    "/kraken-ocr/{_id}": {
      "delete": {
        "summary": "Delete all files created by job with ID 'jobID'.",
        "parameters": [
          {
            "in": "path",
            "schema": {
              "type": "string"
            },
            "name": "jobID",
            "required": true,
            "description": "job ID of the started process."
          }
        ],
        "tags": [
          "Text recognition and optimization"
        ],
        "responses": {
          "500": {
            "description": "Internal error"
          },
          "204": {
            "content": {
              "application/vnd.ocrd+job-status": {
                "schema": {
                  "$ref": "#/components/schemas/job-status"
                }
              }
            },
            "description": "Successful Operation. All linked resources are removed successfully."
          },
          "410": {
            "description": "Resource is not available anymore."
          },
          "404": {
            "description": "Not found."
          }
        }
      },
      "get": {
        "operationId": "get-created-files-of-processor",
        "parameters": [
          {
            "in": "path",
            "schema": {
              "type": "string"
            },
            "name": "jobID",
            "required": true,
            "description": "job ID of the started process."
          }
        ],
        "tags": [
          "Text recognition and optimization"
        ],
        "description": "Fetch all file created by job with id 'jobID'. If more than one file is created per mimetype use mimetype 'application/zip' as accept header to fetch all files at once.",
        "summary": "Get created files.",
        "responses": {
          "500": {
            "description": "Internal error"
          },
          "200": {
            "content": {
              "application/vnd.ocrd+job-status": {
                "schema": {
                  "$ref": "#/components/schemas/job-status"
                }
              },
              "application/vnd.ocrd.log+json": {
                "schema": {
                  "$ref": "#/components/schemas/logging"
                }
              },
              "application/zip": {
                "schema": {
                  "$ref": "#/components/schemas/zip-file"
                }
              },
              "application/mets+xml": {
                "schema": {
                  "$ref": "#/components/schemas/mets-file"
                }
              },
              "image/*": {
                "schema": {
                  "$ref": "#/components/schemas/image-file"
                }
              },
              "application/vnd.ocrd.prov+json": {
                "schema": {
                  "$ref": "#/components/schemas/provenance-file"
                }
              },
              "application/vnd.ocrd.page+xml": {
                "schema": {
                  "$ref": "#/components/schemas/page-file"
                }
              }
            },
            "description": "Successful Operation."
          },
          "400": {
            "description": "Bad request. Maybe more than one file of at least one mimetype was created. Please use mimetype 'application/zip' as accept header to fetch all files at once."
          }
        }
      }
    }
  },
  "info": {
    "termsOfService": "http://swagger.io/terms/",
    "contact": {
      "email": "volker.hartmann@kit.edu"
    },
    "license": {
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html",
      "name": "Apache 2.0"
    },
    "description": "This is a generic definition of the modules used for the OCR-D project.\n* Implementation path for the different processors (description)\n* /preprocessing/characterization (Determine specific characteristics of a digitalization.)\n* /preprocessing/optimization (Execute all steps for image optimization at once.)\n* /preprocessing/optimization/cropping (Crops the digitization to printspace.)\n* /preprocessing/optimization/deskewing (Deskews the digitization.)\n* /preprocessing/optimization/despeckling (Despeckles the digitization.)\n* /preprocessing/optimization/dewarping (Dewarps the digitization.)\n* /preprocessing/optimization/binarization (Binarize the digitization.)\n*  /recognition/text-recognition (Estimate font families and languages used.)\n*  /recognition/font-identification (Estimate font families and languages used.)\n* /layout/segmentation (Detect and classify all regions of a page.)\n* /layout/segmentation/page (Detect all regions of a page.)\n* /layout/segmentation/line (Detect all text line regions inside the text regions of a page.)\n* /layout/segmentation/classification | Fine-grained classification of all detected regions of a page.)\n* /layout/analysis (Analyse regions on document level.)",
    "version": "v2.2.1",
    "title": "OCR-D"
  },
  "servers": [
    {
      "url": "http://test.ocr-d.de/v1"
    }
  ]
}
